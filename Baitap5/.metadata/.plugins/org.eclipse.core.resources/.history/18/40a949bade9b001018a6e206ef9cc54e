package com.littlelotus.media.controller;

import com.littlelotus.media.dto.forms.LoginForm;
import com.littlelotus.media.dto.forms.RegisterForm;

import com.littlelotus.media.entity.User;
import com.littlelotus.media.service.UserService;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller
public class AuthController 
{

    private final UserService userService;

    public AuthController(UserService userService) 
    {
        this.userService = userService;
    }

    // Trang login
    @GetMapping("/login")
    public String loginPage(Model model) 
    {
        model.addAttribute("loginForm", new LoginForm());
        return "login";
    }

    // Xử lý login
    @PostMapping("/login")
    public String login(@ModelAttribute LoginForm loginForm, HttpSession session, Model model) 
    {
        try {
            User user = userService.login(loginForm.getUsername(), loginForm.getPassword());
            session.setAttribute("currentUser", user);
            return "redirect:/";
        } 
        catch (RuntimeException e) 
        {
            model.addAttribute("error", "Sai tên đăng nhập hoặc mật khẩu");
            return "login";
        }
    }

    // Trang đăng ký
    @GetMapping("/register")
    public String registerPage(Model model) 
    {
        model.addAttribute("registerForm", new RegisterForm());
        return "register";
    }

    // Xử lý đăng ký
    @PostMapping("/register")
    public String register(@ModelAttribute RegisterForm registerForm, Model model) 
    {
        if (userService.findByUsername(registerForm.getUsername()).isPresent()) 
        {
            model.addAttribute("error", "Tên đăng nhập đã tồn tại");
            return "register";
        }

        User user = new User();
        user.setUsername(registerForm.getUsername());
        user.setEmail(registerForm.getEmail());
        user.setPassword(registerForm.getPassword()); // Lưu plaintext
        user.setUsername(registerForm.getDisplayName());
        user.setAvatarUrl(registerForm.getAvatarUrl());

        userService.register(user);
        return "redirect:/login";
    }

    // Logout
    @GetMapping("/logout")
    public String logout(HttpSession session) 
    {
        session.invalidate();
        return "redirect:/login";
    }
}
