package com.littlelotus.media.service;

import com.littlelotus.media.dto.forms.RegisterForm;
import com.littlelotus.media.entity.User;
import com.littlelotus.media.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import java.util.Optional;

@Service
public class UserService 
{
    private final UserRepository userRepository;
    private final BCryptPasswordEncoder passwordEncoder;

    @Autowired
    public UserService(UserRepository userRepository, BCryptPasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    public User register(RegisterForm form) 
    {
        Optional<User> byUsername = userRepository.findByUsername(form.getUsername());
        if (byUsername.isPresent()) throw new RuntimeException("Username already exists");
        Optional<User> byEmail = userRepository.findByEmail(form.getEmail());
        if (byEmail.isPresent()) throw new RuntimeException("Email already used");

        User u = User.builder()
                .username(form.getUsername())
                .email(form.getEmail())
                .displayName(form.getDisplayName() == null || form.getDisplayName().isBlank() ? form.getUsername() : form.getDisplayName())
                .password(passwordEncoder.encode(form.getPassword()))
                .avatarUrl("/images/default-avatar.png")
                .build();
        return userRepository.save(u);
    }

    public User authenticate(String username, String rawPassword) 
    {
        Optional<User> opt = userRepository.findByUsername(username);
        if (opt.isPresent()) {
            User u = opt.get();
            if (passwordEncoder.matches(rawPassword, u.getPassword())) 
            {
                return u;
            }
        }
        return null;
    }

    public Optional<User> findById(Long id) 
    {
        return userRepository.findById(id);
    }
}
