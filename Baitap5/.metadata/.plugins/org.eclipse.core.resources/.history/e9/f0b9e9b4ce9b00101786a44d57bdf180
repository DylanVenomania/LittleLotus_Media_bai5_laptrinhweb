package com.littlelotus.media.controller;

import com.littlelotus.media.dto.SessionUser;
import com.littlelotus.media.dto.forms.LoginForm;
import com.littlelotus.media.dto.forms.RegisterForm;
import com.littlelotus.media.entity.User;
import com.littlelotus.media.service.UserService;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

@Controller
public class AuthController 
{
    private final UserService userService;
    @Autowired
    public AuthController(UserService userService) 
    {
        this.userService = userService;
    }

    @GetMapping("/register")
    public String showRegister(RegisterForm registerForm) 
    {
        return "register";
    }

    @PostMapping("/register")
    public String doRegister(@Valid RegisterForm registerForm, BindingResult br, Model model, HttpSession session) {
        if (br.hasErrors()) 
        {
            return "register";
        }
        try 
        {
            User u = userService.register(registerForm);
            // create session user
            SessionUser su = new SessionUser(u.getId(), u.getUsername(), u.getDisplayName(), u.getAvatarUrl());
            session.setAttribute("sessionUser", su);
            return "redirect:/";
        } catch (RuntimeException ex) {
            model.addAttribute("error", ex.getMessage());
            return "register";
        }
    }

    @GetMapping("/login")
    public String showLogin(LoginForm loginForm) 
    {
        return "login";
    }

    @PostMapping("/login")
    public String doLogin(@Valid LoginForm loginForm, 
    		BindingResult br, Model model, HttpSession session) 
    {
    	
        if (br.hasErrors()) return "login";

        User u = userService.authenticate(loginForm.getUsername(), loginForm.getPassword());
        if (u == null) 
        {
            model.addAttribute("error", "Invalid credentials");
            return "login";
        }
        SessionUser su = new SessionUser(u.getId(), u.getUsername(), u.getDisplayName(), u.getAvatarUrl());
        session.setAttribute("sessionUser", su);
        return "redirect:/";
    }

    @GetMapping("/logout")
    public String logout(HttpSession session) 
    {
        session.invalidate();
        return "redirect:/";
    }
}
