package com.littlelotus.media.controller;

import com.littlelotus.media.dto.SessionUser;
import com.littlelotus.media.entity.User;
import com.littlelotus.media.dto.forms.LoginForm;
import com.littlelotus.media.dto.forms.RegisterForm;
import com.littlelotus.media.service.UserService;

import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
@RequiredArgsConstructor
public class AuthController {

    private final UserService userService;

    // GET /login
    @GetMapping("/login")
    public String loginForm(Model model) {
        model.addAttribute("loginForm", new LoginForm());
        return "login";
    }

    // POST /login
    @PostMapping("/login")
    public String loginSubmit(@ModelAttribute LoginForm loginForm, HttpSession session, Model model) {
        User user = userService.login(loginForm.getUsername(), loginForm.getPassword());
        if (user != null) {
            session.setAttribute("sessionUser", new SessionUser(user));
            return "redirect:/"; // redirect tr√°nh Circular view path
        } else {
            model.addAttribute("error", "Invalid credentials");
            return "login";
        }
    }

    // GET /register
    @GetMapping("/register")
    public String registerForm(Model model) {
        model.addAttribute("registerForm", new RegisterForm());
        return "register";
    }

    // POST /register
    @PostMapping("/register")
    public String registerSubmit(@ModelAttribute RegisterForm registerForm, Model model) {
        User user = User.builder()
                .username(registerForm.getUsername())
                .email(registerForm.getEmail())
                .password(registerForm.getPassword()) // plain text
                .displayName(registerForm.getDisplayName())
                .avatarUrl(registerForm.getAvatarUrl())
                .build();

        boolean success = userService.register(user);
        if (success) {
            return "redirect:/login";
        } else {
            model.addAttribute("error", "Username or email already exists");
            return "register";
        }
    }
}
