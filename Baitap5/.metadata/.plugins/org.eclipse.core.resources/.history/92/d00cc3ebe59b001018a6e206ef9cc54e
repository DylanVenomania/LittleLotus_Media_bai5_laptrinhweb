package com.littlelotus.media.controller;

import com.littlelotus.media.dto.SessionUser;
import com.littlelotus.media.entity.User;
import com.littlelotus.media.dto.forms.LoginForm;
import com.littlelotus.media.dto.forms.RegisterForm;
import com.littlelotus.media.service.UserService;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

@Controller
@RequiredArgsConstructor
public class AuthController {

    private final UserService userService;

    @GetMapping("/register")
    public String showRegister(Model model) {
        model.addAttribute("registerForm", new RegisterForm());
        return "register";
    }

    @PostMapping("/register")
    public String register(@Valid @ModelAttribute RegisterForm registerForm,
                           BindingResult result, Model model) {
        if (result.hasErrors()) {
            return "register";
        }
        User user = User.builder()
                .username(registerForm.getUsername())
                .password(registerForm.getPassword())
                .email(registerForm.getEmail())
                .build();
        userService.register(user);
        return "redirect:/login";
    }

    @GetMapping("/login")
    public String showLogin(Model model) {
        model.addAttribute("loginForm", new LoginForm());
        return "login";
    }

    @PostMapping("/login")
    public String login(@Valid @ModelAttribute LoginForm loginForm,
                        BindingResult result, HttpSession session, Model model) {
        if (result.hasErrors()) return "login";

        return userService.login(loginForm.getUsername(), loginForm.getPassword())
                .map(user -> {
                    SessionUser sessionUser = new SessionUser();
                    sessionUser.setId(user.getId());
                    sessionUser.setUsername(user.getUsername());
                    sessionUser.setEmail(user.getEmail());
                    session.setAttribute("user", sessionUser);
                    return "redirect:/";
                })
                .orElseGet(() -> {
                    model.addAttribute("error", "Invalid username or password");
                    return "login";
                });
    }

    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "redirect:/login";
    }
}
