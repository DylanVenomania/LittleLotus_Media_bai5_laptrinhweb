package com.littlelotus.media.controller;

import com.littlelotus.media.dto.SessionUser;
import com.littlelotus.media.entity.Comment;
import com.littlelotus.media.entity.Post;
import com.littlelotus.media.dto.forms.CommentForm;
import com.littlelotus.media.dto.forms.PostForm;
import com.littlelotus.media.service.CommentService;
import com.littlelotus.media.service.PostService;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

@Controller
@RequiredArgsConstructor
@RequestMapping("/post")
public class PostController {

    private final PostService postService;
    private final CommentService commentService;

    @GetMapping("/new")
    public String newPost(Model model) {
        model.addAttribute("postForm", new PostForm());
        return "newpost";
    }

    @PostMapping("/new")
    public String createPost(@Valid @ModelAttribute PostForm postForm,
                             BindingResult result,
                             HttpSession session) {
        if (result.hasErrors()) return "newpost";

        SessionUser sessionUser = (SessionUser) session.getAttribute("user");
        Post post = Post.builder()
                .content(postForm.getContent())
                .imageUrl(postForm.getImageUrl())
                .user(null) 
                .build();
        postService.create(post);
        return "redirect:/";
    }

    @PostMapping("/{postId}/comment")
    public String comment(@PathVariable Long postId,
                          @Valid @ModelAttribute CommentForm commentForm,
                          BindingResult result,
                          HttpSession session) {
        if (result.hasErrors()) return "redirect:/";

        SessionUser sessionUser = (SessionUser) session.getAttribute("user");
        Comment comment = Comment.builder()
                .content(commentForm.getContent())
                .post(Post.builder().id(postId).build())
                .user(null) // TODO: Load User entity by ID
                .build();
        commentService.create(comment);
        return "redirect:/";
    }
}
