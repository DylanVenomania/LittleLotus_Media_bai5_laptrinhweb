package com.littlelotus.controller;

import com.littlelotus.entity.Category;
import com.littlelotus.service.CategoryService;
// Import validation cá»§a Jakarta
import jakarta.validation.Valid; 

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/admin/categories") 
public class AdminCategoryController 
{
    
    @Autowired
    private CategoryService categoryService;

    // tao
    @PostMapping
    public ResponseEntity<Category> createCategory(@Valid @RequestBody Category category) 
    {
        Category savedCategory = categoryService.save(category);
        return new ResponseEntity<>(savedCategory, HttpStatus.CREATED);
    }

    //doc va tim kiem
    @GetMapping
    public List<Category> getAllOrSearchCategories(@RequestParam(required = false) String keyword) 
    {
        if (keyword != null && !keyword.isEmpty()) 
        {
            return categoryService.search(keyword);
        }
        return categoryService.findAll();
    }
    
    // doc boi id
    @GetMapping("/{id}")
    public ResponseEntity<Category> getCategoryById(@PathVariable Long id) 
    {
        return categoryService.findById(id)
                .map(category -> new ResponseEntity<>(category, HttpStatus.OK))
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }
    
    // cap nhat
    @PutMapping("/{id}")
    public ResponseEntity<Category> updateCategory(@PathVariable Long id, @Valid @RequestBody Category categoryDetails) 
    {
        return categoryService.findById(id)
                .map(category -> {
                    category.setName(categoryDetails.getName());
                    category.setDescription(categoryDetails.getDescription());
                    Category updatedCategory = categoryService.save(category);
                    return new ResponseEntity<>(updatedCategory, HttpStatus.OK);
                })
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    // xoa
    @DeleteMapping("/{id}")
    public ResponseEntity<HttpStatus> deleteCategory(@PathVariable Long id) 
    {
        categoryService.deleteById(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT); 
    }
}